package InterviewSummary.dynamicProgramming;
/*
题干：
你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。
示例 1:
输入: [1,2,3,1]
输出: 4
解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
     偷窃到的最高金额 = 1 + 3 = 4 。
————————————————
想法

其实题干说了那么多就是想找出遍历数组的最大值
要求取值的数组不相邻
我们首先用数组d[]来存储已经取得的数值的最大值
而我不能相邻的意思就是需要将
d[i-1]与d[i-2]+nums[I的最大值进行比较
遍历一遍即可

我开始有这样一个想法
有没有可能最开始的一家不选反而值最大呢
再仔细想一下 可以‘但是如果第二个值也不选的话就一定不行
因为加上两个中的一个肯定更大
于是我们可以先手动维护前两个
显然d[1]=nums[1]
d[2]=nums[1]与nums[2]的最大值
那么接下来就可以直接看代码了
————————————————
总结地址：https://blog.csdn.net/qq_43491066/article/details/104141920
 */

public class rob {
    public int rob(int[] nums) {
        //数组的长度
        int len=nums.length;
        //如果数组为0
        if(len==0){
            return 0;
        }
        //如果只有这一家 那么偷他
        if(len==1){
            return nums[0];
        }
        //如果有两家 偷富的一家
        if(len==2){
            return Math.max(nums[0],nums[1]);
        }
        //维护d[]
        int d[]=new int[len];
        d[0]=nums[0];
        d[1]=Math.max(nums[0],nums[1]);
        //遍历进行动态规划
        for(int i=2;i<len;i++){
            d[i]=Math.max(d[i-2]+nums[i],d[i-1]);
        }
        //len-1对应一共有len家
        return d[len-1];
    }

}
